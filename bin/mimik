#!/usr/bin/env node
/*global require,console,process */

/*
 * MODULE DEPENDENCIES
 */

var fs = require('fs'),
    glob = require('glob'),
    path = require('path'),
    winston = require('winston'),
    exists = fs.existsSync || path.existsSync,
    pkg = require('../package.json'),
    program = require('commander'),
    utils = require('../lib/utils'),
    Yadda = require('yadda'),
    chokidar = require('chokidar'),
    colors = require('colors');

colors.setTheme({
    note: 'grey',
    info: 'white',
    success: 'green',
    warn: 'yellow',
    debug: 'blue',
    error: 'red'
});

program
    .version(pkg.version)
    .description(pkg.description);

var cmd = require('../lib/help')(program);

/*
 * GLOBALS
 */

var reruns = [],
    logger,
    runner;

/**
 * scan for files at the given `path`.
 */
function scanFiles(target) {
    var files = [];
    if (exists(target)) {
        files = glob.sync(target + '/**/*.{feature,coffee,js}');
    } else {
        logger.warn('[command] cannot resolve path (or pattern) "' + target + '"');
    }
    return files;
    
}

/*
 * filter through a list of files using optional match patterns
 */
function filterFiles(files, params) {
    var re = new RegExp(params.match || '');
    var inv = !!params.matchInvert,
        featureFiles = [],
        stepFiles = [],
        sourceFiles = [],
        ignore = ['node_modules', 'bower_components', '.svn', '.git'];

    var English = Yadda.localisation.English,
        parser = new Yadda.parsers.FeatureFileParser(English);

    function ignored(path) {
        var ignored = false;
        for(var i = 0, len = ignore.length; i < len; i++) {
            if(~path.indexOf(ignore[i])) {
                ignored = true;
                break;
            }
        }
        return ignored;
    }
    function hasTags(feature, tags) {
        var status = false,
            annotations = feature.annotations;
        (tags||[]).every(function(tag) {
            if(annotations[tag]) {
                status = true;
                return false;
            }
            return true;
        });
        return status;
    }
    
    function filterByTags(file, params) {
        if((!params.tags || params.tags.length === 0) && (!params.excludeTags || params.excludeTags.length === 0)) {
            return true;
        }
        var feature = parser.parse(file);
        if((!params.tags || hasTags(feature, params.tags)) && (!params.excludeTags || !hasTags(feature, params.excludeTags))) {
            return true;
        }
        return false;
    }

    function filterByPattern(file, re, inv) {
        var match = re.test(file);
        return match && !inv || !match && inv;        
    }
    
    function isFeature(file) {
        var ext = path.extname(file).substr(1);
        return ~['feature', 'spec', 'specification'].indexOf(ext);
    }

    function isRerun(file) {
        return !reruns.length || reruns.indexOf(path.join(process.cwd(), file)) > -1;
    }
    
    // load reruns if any
    if(params.rerun) {
        var rerunFile = path.join(process.cwd(), params.rerun, 'rerun.dat');
        if(exists(rerunFile)) {
            reruns = fs.readFileSync(rerunFile).toString().trim();
            reruns = reruns ? reruns.split('\n') : [];
        } else {
            logger.debug('[command] rerun file %s not found', rerunFile);
        }
    }
    
    files.forEach(function(file) {
        if(!ignored(file)) {
            // filter by match pattern, tag annotations and reruns
            if(isFeature(file) && filterByPattern(file, re, inv) && filterByTags(file, params) && isRerun(file)) {
                featureFiles.push(file);
            } else if(/(-step|Step)s?\./.test(path.basename(file))){
                stepFiles.push(file);
            } else {
                sourceFiles.push(file);
            }
        }
    });
    
    return {
        featureFiles: featureFiles,
        stepFiles: stepFiles,
        sourceFiles: sourceFiles
    };
}

/*
 * scan and filter through passed file paths to retrieve tests.
 */
function getTestFiles(args, options) {
    // default files to ./**/*.{feature,js,coffee}
    var files = [];
    args = args.length > 0 ? args : ['.'];
    args.forEach(function(arg){
       files = files.concat(scanFiles(arg));
    });
    // process exclusions and filtering
    return filterFiles(files, options);
}


function getLogger(config) {
    var isatty = require('tty').isatty(process.stdout.fd),
        levels = {
            debug: 1,
            info: 2,
            warn: 3,
            error: 4
        },
        colors = {
            info: 'cyan',
            debug: 'grey',
            warn: 'yellow',
            error: 'red'
        };
    var options = {
        console: utils.apply({
            //handleExceptions: true,
            json: false,
            level: 'error',
            colorize:  isatty, /* patch: do not colorize file and pipe output */
            exitOnError: false
        }, options)
    };

    if (config.log) {
        options.file = {
            filename: config.log,
            level: 'debug',
            json: false
        };
    }

    // share logger config
    winston.addColors(colors);
    winston.loggers.add('mimik', options);

    var logger = winston.loggers.get('mimik');
    logger.setLevels(levels);

    if (config.debug) {
        logger.transports.console.level = 'debug';
        logger.debug('[command] debug logging is ON');
    }
    return logger;
}

function runTests(targets, options) {
    // Process configuration
    var config = {};
    
    if(runner && runner.state === 'started') {
        runner.abort(function() {
            runTests(targets, options);
        });
        return;
    }
    if(program.config) {
        try {
            config = JSON.parse(fs.readFileSync(program.config));
        } catch(e) {
            console.error('Error parsing config file:', program.config);
            console.error(e.message);
            process.exit(1);
        }
    }
    // Fetch test files and apply file pattern filtering
    var files = getTestFiles(targets, utils.copyTo({}, program, 'match,matchInvert,tags,excludeTags,rerun'));
    logger.debug('[command] matching files', files);

    utils.apply(utils.copyTo(config, program, 'browsers,timeout,slow,debug,failfast,tunnel,port,testStrategy,reporters,reportPath,rerun,shareSession,match,matchInvert,tags,excludeTags,rerun'), {
        featureFiles: files.featureFiles,
        stepFiles: files.stepFiles,
        sourceFiles: files.sourceFiles
    });
    logger.debug('[command] configuration', config);


    function onRunComplete (stats) {
        /*
        Exit with the following status codes:
        0 if testing was completed and all tests passed.
        1 if testing was completed but some tests failed.
        */
        if(program.rerun) {
            var rerunFile = path.join(process.cwd(), program.rerun, 'rerun.dat'),
                output = [];
            if(stats.failures > 0) {
                utils.each(stats.results, function(result) {
                    if(result.stats.failures > 0) {
                        output.push(path.join(process.cwd(), result.feature.file));
                    }
                });
            }
            fs.writeFileSync(rerunFile, output);
        }

        runner = null;
        // don't exit if we're in watch mode
        if(options && !options.watch) {
            var exitCode = (stats.failures > 0) ? 1 : 0;
            process.exit(exitCode);
        }
    }

    var Runner = require('../runner/Runner');
    runner = new Runner(config);
    runner.run(onRunComplete);
}
function generateSteps(file) {
    var StepDefinitionGenerator = require('../lib/StepDefinitionGenerator'),
        generator = new StepDefinitionGenerator();
    // clear the console
    process.stdout.write('\u001B[2J');
    // Move the cursor to the top
    process.stdout.write('\u001B[f');
    printLogo();
    
    generator.prompt(file, function(data) {
        generator.generateFromFile(file, data.language, data.type, data.target, function(err, output) {
            if(err) {
                logger.debug('[command] Could not generate source.', err.message);
                console.error('[command] Could not generate source.', err.message);
            } else if(!data.target) {
                console.log('Output:\n'.note);
                console.log(output);
            }
            process.exit();
        });
    });

}

function watchPaths(targets) {

    // clear the console
    process.stdout.write('\u001B[2J');
    // Move the cursor to the top
    process.stdout.write('\u001B[f');
    printLogo();
    console.log('Watching for changes, press', 'Ctrl+C'.note, 'to exit\n');

    var fn = function(target) {
        function f(n) {
            // Format integers to have a leading zero.
            return n < 10 ? '0' + n : n;
        }
        var date = new Date(),
            time = f(date.getHours()) + ":" + f(date.getMinutes()) + ":" + f(date.getSeconds());
        console.info(('Change detected at ' + time + ' in').note, path.basename(target));
        console.log();
        runTests(targets, { watch: true });
    };

    targets = targets.length > 0 ? targets : ['.'];
    var watcher = chokidar.watch(targets, { 
        ignored: /[\/\\]\./, 
        persistent: true,
        ignoreInitial: true
    });

    utils.each(['add', 'addDir', 'change', 'unlink'], function(event) {
        watcher.on(event, fn);
    });

}
function processCommand(cmd) {
    if(cmd.action === 'run') {
        logger.info('[command] execute "run" mode');
        printLogo();
        runTests(cmd.args);
    } else if(cmd.action === 'watch') {
        logger.info('[command] execute "watch" mode');
        watchPaths(cmd.args);
    } else if(cmd.action === 'web') {
        logger.info('[command] execute "web" mode');
        printLogo();
    } else if(cmd.action === 'generate') {
        logger.info('[command] execute "generate" mode');
        if(!cmd.file) {
            printLogo();
            console.error('  The "generate" command requires a file <path>.');
            console.error('  --------------------------------');
            cmd.cmd.help();
            return;
        }
        generateSteps(cmd.file);
    } else {
        printLogo();
        console.error('  No command specified.');
        console.error('  ---------------------');
        program.help();
    }
}
function printLogo() {
    console.log(["",
    "  ███    ███ ██ ███    ███ ██ ██   ██  ",
    "  ████  ████ ██ ████  ████ ██ ██  ██   ",
    "  ██ ████ ██ ██ ██ ████ ██ ██ █████    ",
    "  ██  ██  ██ ██ ██  ██  ██ ██ ██  ██   ",
    "  ██      ██ ██ ██      ██ ██ ██   ██  ",
    ""].join('\n'));
}

/*
 * INITIALIZATION
 */

// parse args
program.parse(process.argv);
// Init logger
logger = getLogger(utils.copyTo({}, program, 'debug,log'));

// perform graceful shutdown on Ctrl+C
process.on('SIGINT', function () {
    if(runner) {
        runner.abort(function() {
            process.exit(runner.stats.failures > 0 ? 1 : 0);
        });
    } else {
        process.exit(0);
    }
});

processCommand(cmd);
